'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var rimraf = _interopDefault(require('rimraf'));
var chalk = _interopDefault(require('chalk'));
var ora = _interopDefault(require('ora'));
var yargs = _interopDefault(require('yargs-parser'));
var rollup = require('rollup');
var rollupPluginNodeResolve = _interopDefault(require('rollup-plugin-node-resolve'));
var rollupPluginCommonjs = _interopDefault(require('rollup-plugin-commonjs'));
var rollupPluginTerser = require('rollup-plugin-terser');
var rollupPluginReplace = _interopDefault(require('rollup-plugin-replace'));
var rollupPluginJson = _interopDefault(require('rollup-plugin-json'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

const cwd = process.cwd();
const banner = chalk.bold(`@pika/web`) + ` installing... `;
const detectionResults = [];
let spinner = ora(banner);

function showHelp() {
  console.log(`${chalk.bold(`@pika/web`)} - Install npm dependencies to run natively on the web.`);
  console.log(`
  Options
    --dest      Specify destination directory (default: "web_modules/").
    --clean     Clear out the destination directory before install.
    --optimize  Minify installed dependencies.
    --strict    Only install pure ESM dependency trees. Fail if a CJS module is encountered.
`);
}

function formatDetectionResults(skipFailures) {
  return detectionResults.map(([d, yn]) => yn ? chalk.green(d) : skipFailures ? chalk.dim(d) : chalk.red(d)).join(', ');
}

function logError(msg) {
  spinner.stopAndPersist({
    symbol: chalk.cyan('â ¼')
  });
  spinner = ora(chalk.red(msg));
  spinner.fail();
}

class ErrorWithHint extends Error {
  constructor(message, hint) {
    super(message);
    this.hint = hint;
  }

}
/**
 * Resolve a "webDependencies" input value to the correct absolute file location.
 * Supports both npm package names, and file paths relative to the node_modules directory.
 * Follows logic similar to Node's resolution logic, but using a package.json's ESM "module"
 * field instead of the CJS "main" field.
 */


function resolveWebDependency(dep) {
  const nodeModulesLoc = path.join(cwd, 'node_modules', dep);
  let dependencyStats;

  try {
    dependencyStats = fs.statSync(nodeModulesLoc);
  } catch (err) {
    throw new ErrorWithHint(`"${dep}" not found in your node_modules directory.`, chalk.italic(`Did you remember to run npm install?`));
  }

  if (dependencyStats.isFile()) {
    return nodeModulesLoc;
  }

  if (dependencyStats.isDirectory()) {
    const dependencyManifestLoc = path.join(nodeModulesLoc, 'package.json');

    const manifest = require(dependencyManifestLoc);

    if (!manifest.module) {
      throw new ErrorWithHint(`dependency "${dep}" has no ES "module" entrypoint.`, chalk.italic(`Tip: Find modern, web-ready packages at ${chalk.underline('https://pikapkg.com/packages')}`));
    }

    return path.join(nodeModulesLoc, manifest.module);
  }

  throw new Error(`Error loading "${dep}" at "${nodeModulesLoc}". (MODE=${dependencyStats.mode}) `);
}
/**
 * Formats the @pika/web dependency name from a "webDependencies" input value:
 * 2. Remove any ".js" extension (will be added automatically by Rollup)
 */


function getWebDependencyName(dep) {
  return dep.replace(/\.js$/, '');
}

function install(_x, _x2) {
  return _install.apply(this, arguments);
}

function _install() {
  _install = _asyncToGenerator(function* (arrayOfDeps, {
    isCleanInstall,
    destLoc,
    skipFailures,
    isStrict,
    isOptimized
  }) {
    if (arrayOfDeps.length === 0) {
      logError('no dependencies found.');
      return;
    }

    if (!fs.existsSync(path.join(cwd, 'node_modules'))) {
      logError('no "node_modules" directory exists. Did you run "npm install" first?');
      return;
    }

    if (isCleanInstall) {
      rimraf.sync(destLoc);
    }

    const depObject = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = arrayOfDeps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const dep = _step.value;

        try {
          const depName = getWebDependencyName(dep);
          const depLoc = resolveWebDependency(dep);
          depObject[depName] = depLoc;
          detectionResults.push([dep, true]);
          spinner.text = banner + formatDetectionResults(skipFailures);
        } catch (err) {
          detectionResults.push([dep, false]);
          spinner.text = banner + formatDetectionResults(skipFailures);

          if (skipFailures) {
            continue;
          } // An error occurred! Log it.


          logError(err.message || err);

          if (err.hint) {
            console.log(err.hint);
          }

          return false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    const inputOptions = {
      input: depObject,
      plugins: [!isStrict && rollupPluginReplace({
        'process.env.NODE_ENV': isOptimized ? '"production"' : '"development"'
      }), rollupPluginNodeResolve({
        mainFields: ['module', !isStrict && 'main'].filter(Boolean),
        modulesOnly: isStrict,
        extensions: ['.mjs', '.cjs', '.js', '.json'],
        // whether to prefer built-in modules (e.g. `fs`, `path`) or local ones with the same names
        preferBuiltins: false
      }), !isStrict && rollupPluginJson({
        preferConst: true,
        indent: '  '
      }), !isStrict && rollupPluginCommonjs({
        extensions: ['.js', '.cjs']
      }), isOptimized && rollupPluginTerser.terser()]
    };
    const outputOptions = {
      dir: destLoc,
      format: 'esm',
      sourcemap: true,
      exports: 'named',
      chunkFileNames: 'common/[name]-[hash].js'
    };
    const packageBundle = yield rollup.rollup(inputOptions);
    yield packageBundle.write(outputOptions);
    return true;
  });
  return _install.apply(this, arguments);
}

function cli(_x3) {
  return _cli.apply(this, arguments);
}

function _cli() {
  _cli = _asyncToGenerator(function* (args) {
    const _yargs = yargs(args),
          help = _yargs.help,
          _yargs$optimize = _yargs.optimize,
          optimize = _yargs$optimize === void 0 ? false : _yargs$optimize,
          _yargs$strict = _yargs.strict,
          strict = _yargs$strict === void 0 ? false : _yargs$strict,
          _yargs$clean = _yargs.clean,
          clean = _yargs$clean === void 0 ? false : _yargs$clean,
          _yargs$dest = _yargs.dest,
          dest = _yargs$dest === void 0 ? 'web_modules' : _yargs$dest;

    const destLoc = path.join(cwd, dest);

    if (help) {
      showHelp();
      process.exit(0);
    }

    const cwdManifest = require(path.join(cwd, 'package.json'));

    const doesWhitelistExist = !!(cwdManifest['@pika/web'] && cwdManifest['@pika/web'].webDependencies);
    const arrayOfDeps = doesWhitelistExist ? cwdManifest['@pika/web'].webDependencies : Object.keys(cwdManifest.dependencies || {});
    spinner.start();
    const startTime = Date.now();
    const result = yield install(arrayOfDeps, {
      isCleanInstall: clean,
      destLoc,
      skipFailures: !doesWhitelistExist,
      isStrict: strict,
      isOptimized: optimize
    });

    if (result) {
      spinner.succeed(chalk.bold(`@pika/web`) + ` installed: ` + formatDetectionResults(!doesWhitelistExist) + '. ' + chalk.dim(`[${((Date.now() - startTime) / 1000).toFixed(2)}s]`));
    }
  });
  return _cli.apply(this, arguments);
}

exports.cli = cli;
exports.install = install;
